"""empty message

Revision ID: fb5b6ed61b8c
Revises: d09d024a5f9e
Create Date: 2021-01-07 13:23:19.356449

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from app.models.types import ProductType

# revision identifiers, used by Alembic.
revision = 'fb5b6ed61b8c'
down_revision = 'd09d024a5f9e'
branch_labels = None
depends_on = None

old_product_type = sa.Enum('switch', 'case', 'pcb', 'plate', 'keyset', name='product_type')
new_product_type = sa.Enum('switch', 'case', 'pcb', 'plate', 'keyset', 'kit', 'stabilizer', 'lube', 'film', 'spring', 'tool', 'deskmat', name='product_type')
tmp_product_type = sa.Enum('switch', 'case', 'pcb', 'plate', 'keyset', 'kit', 'stabilizer', 'lube', 'film', 'spring', 'tool', 'deskmat', name='_product_type')

products = sa.sql.table('products',
                   sa.Column('type', new_product_type, nullable=False))

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    # ### end Alembic commands ###
    # Create a tempoary "_status" type, convert and drop the "old" type
    tmp_product_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE products ALTER COLUMN type TYPE _product_type'
               ' USING type::text::_product_type')
    old_product_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "new" status type
    new_product_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE products ALTER COLUMN type TYPE product_type'
               ' USING type::text::product_type')
    tmp_product_type.drop(op.get_bind(), checkfirst=False)



def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('user_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey')
    )
    # ### end Alembic commands ###
    # Convert 'output_limit_exceeded' status into 'timed_out'
    op.execute(products.update().where(products.c.status==u'output_limit_exceeded')
               .values(status='timed_out'))
    # Create a tempoary "_status" type, convert and drop the "new" type
    tmp_product_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE products ALTER COLUMN type TYPE _product_type'
               ' USING type::text::_product_type')
    new_product_type.drop(op.get_bind(), checkfirst=False)
    # Create and convert to the "old" status type
    old_product_type.create(op.get_bind(), checkfirst=False)
    op.execute('ALTER TABLE products ALTER COLUMN type TYPE product_type'
               ' USING type::text::product_type')
    tmp_product_type.drop(op.get_bind(), checkfirst=False)
